create_sli_library("C:/Users/PaintRock/Documents/Data processing/Hyperspectral/masked_subset.csv",
"C:/Users/PaintRock/Documents/Data processing/Hyperspectral/canopy_spectra/speclib.sli")
# Function to create the .sli file
create_sli_library <- function(input_csv, output_sli) {
# Step 1: Read the CSV file
data <- read.csv(input_csv, header = TRUE)
# Step 2: Separate attributes and spectral data
attributes <- data[, 1:4]  # Assuming first 3 columns are attributes
spectral_data <- data[, 5:ncol(data)]  # Assuming columns 4 and beyond are spectral data
# Step 3: Extract wavelengths from the column headers (spectral bands)
wavelengths <- colnames(spectral_data)  # Extract column names (assumed to be wavelengths)
# Step 4: Prepare the .sli file content
sli_content <- "# ENVI Spectral Library\n"
sli_content <- paste(sli_content, "# Spectral library: Custom Spectral Data\n", sep="")
# Add number of spectra and bands
num_spectra <- nrow(spectral_data)
num_bands <- ncol(spectral_data)
sli_content <- paste(sli_content, paste("# Number of spectra:", num_spectra, "\n"), sep="")
sli_content <- paste(sli_content, paste("# Number of bands:", num_bands, "\n"), sep="")
# Add wavelengths to the file if they were extracted
sli_content <- paste(sli_content, "# Wavelengths\n", sep="")
sli_content <- paste(sli_content, paste(wavelengths, collapse = ", "), "\n", sep="")
# Write metadata section (attributes)
sli_content <- paste(sli_content, "# Metadata\n", sep="")
for (i in 1:nrow(attributes)) {
sli_content <- paste(sli_content, paste(attributes[i, ], collapse = ","), "\n", sep="")
}
# Write spectral data section
sli_content <- paste(sli_content, "# Spectral Data\n", sep="")
for (i in 1:nrow(spectral_data)) {
# Each row is a spectrum; assume each row corresponds to a spectrum with spectral bands
spectrum <- spectral_data[i, ]
sli_content <- paste(sli_content, paste(spectrum, collapse = ","), "\n", sep="")
}
# Step 5: Save the content to the .sli file
writeLines(sli_content, output_sli)
cat("Spectral library saved to", output_sli, "\n")
}
# Example usage
create_sli_library("C:/Users/PaintRock/Documents/Data processing/Hyperspectral/masked_subset.csv",
"C:/Users/PaintRock/Documents/Data processing/Hyperspectral/canopy_spectra/speclib.sli")
library(data.table)
# Function to create the .sli file
create_sli_library <- function(input_csv, output_sli) {
# Step 1: Read the CSV file using fread for efficiency
cat("Reading data...\n")
data <- fread(input_csv)  # fread is faster and more memory efficient than read.csv
cat("Data read successfully!\n")
# Step 2: Separate attributes and spectral data
attributes <- data[, 1:3]  # Assuming first 3 columns are attributes (metadata)
spectral_data <- data[, 4:ncol(data)]  # Assuming columns 4 and beyond are spectral data
# Step 3: Extract wavelengths from the column headers (spectral bands)
wavelengths <- colnames(spectral_data)  # Extract column names (assumed to be wavelengths)
# Step 4: Prepare the .sli file content
cat("Preparing .sli file content...\n")
# Initialize the file content with header information
sli_content <- "# ENVI Spectral Library\n"
sli_content <- paste(sli_content, "# Spectral library: Custom Spectral Data\n", sep="")
# Add number of spectra and bands
num_spectra <- nrow(spectral_data)
num_bands <- ncol(spectral_data)
sli_content <- paste(sli_content, paste("# Number of spectra:", num_spectra), "\n", sep="")
sli_content <- paste(sli_content, paste("# Number of bands:", num_bands), "\n", sep="")
# Add wavelengths section
sli_content <- paste(sli_content, "# Wavelengths\n", sep="")
sli_content <- paste(sli_content, paste(wavelengths, collapse = ", "), "\n", sep="")
# Write metadata section (attributes)
sli_content <- paste(sli_content, "# Metadata\n", sep="")
for (i in 1:nrow(attributes)) {
sli_content <- paste(sli_content, paste(attributes[i, ], collapse = ","), "\n", sep="")
}
# Write spectral data section
sli_content <- paste(sli_content, "# Spectral Data\n", sep="")
# Instead of concatenating rows one by one, write data in chunks
writeLines(sli_content, output_sli)  # Write the header and metadata to the file first
cat("Writing spectral data...\n")
# Write spectral data to file using write.table (faster than repeated paste)
write.table(spectral_data, file = output_sli, append = TRUE, col.names = FALSE, row.names = FALSE, sep = ",")
cat("Spectral library saved to", output_sli, "\n")
}
# Example usage
create_sli_library("C:/Users/PaintRock/Documents/Data processing/Hyperspectral/masked_speclib.csv",
"C:/Users/PaintRock/Documents/Data processing/Hyperspectral/canopy_spectra/speclib.sli")
# Function to create the .sli file
create_sli_library <- function(input_csv, output_sli) {
# Step 1: Read the CSV file using fread for efficiency
cat("Reading data...\n")
data <- fread(input_csv)  # fread is faster and more memory efficient than read.csv
cat("Data read successfully!\n")
# Step 2: Separate attributes and spectral data
attributes <- data[, 1:3]  # Assuming first 3 columns are attributes (metadata)
spectral_data <- data[, 4:ncol(data)]  # Assuming columns 4 and beyond are spectral data
# Step 3: Extract wavelengths from the column headers (spectral bands)
wavelengths <- colnames(spectral_data)  # Extract column names (assumed to be wavelengths)
# Step 4: Prepare the .sli file content
cat("Preparing .sli file content...\n")
# Initialize the file content with header information
sli_content <- "# ENVI Spectral Library\n"
sli_content <- paste(sli_content, "# Spectral library: Custom Spectral Data\n", sep="")
# Add number of spectra and bands
num_spectra <- nrow(spectral_data)
num_bands <- ncol(spectral_data)
sli_content <- paste(sli_content, paste("# Number of spectra:", num_spectra), "\n", sep="")
sli_content <- paste(sli_content, paste("# Number of bands:", num_bands), "\n", sep="")
# Add wavelengths section
sli_content <- paste(sli_content, "# Wavelengths\n", sep="")
sli_content <- paste(sli_content, paste(wavelengths, collapse = ", "), "\n", sep="")
# Write metadata section (attributes)
sli_content <- paste(sli_content, "# Metadata\n", sep="")
for (i in 1:nrow(attributes)) {
sli_content <- paste(sli_content, paste(attributes[i, ], collapse = ","), "\n", sep="")
}
# Write spectral data section
sli_content <- paste(sli_content, "# Spectral Data\n", sep="")
# Instead of concatenating rows one by one, write data in chunks
writeLines(sli_content, output_sli)  # Write the header and metadata to the file first
cat("Writing spectral data...\n")
# Write spectral data to file using write.table (faster than repeated paste)
write.table(spectral_data, file = output_sli, append = TRUE, col.names = FALSE, row.names = FALSE, sep = ",")
cat("Spectral library saved to", output_sli, "\n")
}
# Example usage
create_sli_library("C:/Users/PaintRock/Documents/Data processing/Hyperspectral/masked_subset.csv",
"C:/Users/PaintRock/Documents/Data processing/Hyperspectral/canopy_spectra/speclib.sli")
# Function to create the .sli file
create_sli_library <- function(input_csv, output_sli) {
# Step 1: Read the CSV file using fread for efficiency
cat("Reading data...\n")
data <- fread(input_csv)  # fread is faster and more memory efficient than read.csv
cat("Data read successfully!\n")
# Step 2: Separate attributes and spectral data
attributes <- data[, 1:4]
spectral_data <- data[, 5:ncol(data)]
# Step 3: Extract wavelengths from the column headers (spectral bands)
wavelengths <- colnames(spectral_data)  # Extract column names (assumed to be wavelengths)
# Step 4: Prepare the .sli file content
cat("Preparing .sli file content...\n")
# Initialize the file content with header information
sli_content <- "# ENVI Spectral Library\n"
sli_content <- paste(sli_content, "# Spectral library: Custom Spectral Data\n", sep="")
# Add number of spectra and bands
num_spectra <- nrow(spectral_data)
num_bands <- ncol(spectral_data)
sli_content <- paste(sli_content, paste("# Number of spectra:", num_spectra), "\n", sep="")
sli_content <- paste(sli_content, paste("# Number of bands:", num_bands), "\n", sep="")
# Add wavelengths section
sli_content <- paste(sli_content, "# Wavelengths\n", sep="")
sli_content <- paste(sli_content, paste(wavelengths, collapse = ", "), "\n", sep="")
# Write metadata section (attributes)
sli_content <- paste(sli_content, "# Metadata\n", sep="")
for (i in 1:nrow(attributes)) {
sli_content <- paste(sli_content, paste(attributes[i, ], collapse = ","), "\n", sep="")
}
# Write spectral data section
sli_content <- paste(sli_content, "# Spectral Data\n", sep="")
# Instead of concatenating rows one by one, write data in chunks
writeLines(sli_content, output_sli)  # Write the header and metadata to the file first
cat("Writing spectral data...\n")
# Write spectral data to file using write.table (faster than repeated paste)
write.table(spectral_data, file = output_sli, append = TRUE, col.names = FALSE, row.names = FALSE, sep = ",")
cat("Spectral library saved to", output_sli, "\n")
}
# Example usage
create_sli_library("C:/Users/PaintRock/Documents/Data processing/Hyperspectral/masked_subset.csv",
"C:/Users/PaintRock/Documents/Data processing/Hyperspectral/canopy_spectra/speclib.sli")
library(RStoolbox)
# Function to write an ENVI Spectral Library (SLI)
writeSLI <- function(x, path, wavl.units = "Micrometers", scaleF = 1, mode = "bin", endian = .Platform$endian) {
## Begin write binary mode
if (mode == "bin") {
# Write header file (ENVI header format)
sink(paste0(path, ".hdr"))
writeLines(paste0("ENVI\n",
"description = {\n   ENVI SpecLib created using RStoolbox for R [", date(), "]}\n",
"samples = ", 1, "\n",
"lines   = ", 1, "\n",
"bands   = ", nrow(x), "\n",
"header offset = 0\n",
"file type = ENVI Spectral Library\n",
"data type = 5\n",  # ENVI data type for reflectance data
"interleave = bsq\n",
"sensor type = Unknown\n",
"byte order = ", c("little" = 0, "big" = 1)[endian], "\n",
"wavelength units = ", wavl.units, "\n",
"reflectance scale factor = ", scaleF, "\n",
"z plot range = {0.00,", ceiling(max(x[, 2], na.rm = TRUE) * 1.2), "}\n",
"z plot titles = {Wavelength, Reflectance}\n",
"band names = {\nSpectral Library}\n",
"spectra names = {\n ",
paste(colnames(x)[-1], collapse = ", "), "}\n",
"wavelength = {\n ",
paste(x[, 1], collapse = ", "), "}"))
sink()
## Write actual binary data
x1 <- as.vector(unlist(x[, -1]))  # Flatten the spectral data (removes the first column - wavelengths)
writeBin(x1, path, endian = endian)  # Write binary data to the file
} ## End write binary mode
## Begin write ASCII mode
if (mode == "ASCII") {
# Create column descriptions for each column (except wavelength column)
collector <- character()
for (i in 2:ncol(x)) {
collector <- append(collector, paste0("\nColumn ", i, ": ", colnames(x)[i], "~~", i))
}
# Write the header for ASCII file
sink(path)
writeLines(paste0("ENVI ASCII Plot File [", date(), "]\n",
"Column 1: wavelength",
paste0(collector, collapse = "")))
sink()
# Append spectral data in the proper format
write.table(data.frame(x = rep("", nrow(x)), x), path, sep = "  ", append = TRUE, row.names = FALSE, col.names = FALSE, quote = FALSE)
} ## End ASCII mode
} ## EOF writeSLI
data <- read.csv("C:/Users/PaintRock/Documents/Data processing/Hyperspectral/masked_subset.csv")
# Call the function to write the SLI file
writeSLI(data, "C:/path_to_your_file/speclib", mode = "bin")  # Use "ASCII" if you want ASCII output
# Function to write an ENVI Spectral Library (SLI)
writeSLI <- function(x, path, wavl.units = "Micrometers", scaleF = 1, mode = "bin", endian = .Platform$endian) {
## Begin write binary mode
if (mode == "bin") {
# Write header file (ENVI header format)
sink(paste0(path, ".hdr"))
writeLines(paste0("ENVI\n",
"description = {\n   ENVI SpecLib created using RStoolbox for R [", date(), "]}\n",
"samples = ", 1, "\n",
"lines   = ", 1, "\n",
"bands   = ", nrow(x), "\n",
"header offset = 0\n",
"file type = ENVI Spectral Library\n",
"data type = 5\n",  # ENVI data type for reflectance data
"interleave = bsq\n",
"sensor type = Unknown\n",
"byte order = ", c("little" = 0, "big" = 1)[endian], "\n",
"wavelength units = ", wavl.units, "\n",
"reflectance scale factor = ", scaleF, "\n",
"z plot range = {0.00,", ceiling(max(x[, 2], na.rm = TRUE) * 1.2), "}\n",
"z plot titles = {Wavelength, Reflectance}\n",
"band names = {\nSpectral Library}\n",
"spectra names = {\n ",
paste(colnames(x)[-1], collapse = ", "), "}\n",
"wavelength = {\n ",
paste(x[, 1], collapse = ", "), "}"))
sink()
## Write actual binary data
x1 <- as.vector(unlist(x[, -1]))  # Flatten the spectral data (removes the first column - wavelengths)
writeBin(x1, path, endian = endian)  # Write binary data to the file
} ## End write binary mode
## Begin write ASCII mode
if (mode == "ASCII") {
# Create column descriptions for each column (except wavelength column)
collector <- character()
for (i in 2:ncol(x)) {
collector <- append(collector, paste0("\nColumn ", i, ": ", colnames(x)[i], "~~", i))
}
# Write the header for ASCII file
sink(path)
writeLines(paste0("ENVI ASCII Plot File [", date(), "]\n",
"Column 1: wavelength",
paste0(collector, collapse = "")))
sink()
# Append spectral data in the proper format
write.table(data.frame(x = rep("", nrow(x)), x), path, sep = "  ", append = TRUE, row.names = FALSE, col.names = FALSE, quote = FALSE)
} ## End ASCII mode
} ## EOF writeSLI
# Call the function to write the SLI file
writeSLI(data, "C:/Users/PaintRock/Documents/Data processing/Hyperspectral/canopy_spectra/speclib.sli"
, mode = "bin")  # Use "ASCII" if you want ASCII output
View(data)
View(data)
# Function to write an ENVI Spectral Library (SLI)
writeSLI <- function(x, path, wavl.units = "Micrometers", scaleF = 1, mode = "bin", endian = .Platform$endian) {
# Separate attributes (first four columns) and spectral data (remaining columns)
attributes <- x[, 1:4]  # Assuming first four columns are attributes
spectral_data <- x[, 5:ncol(x)]  # Assuming remaining columns are spectral data
## Begin write binary mode
if (mode == "bin") {
# Write header file (ENVI header format)
sink(paste0(path, ".hdr"))
writeLines(paste0("ENVI\n",
"description = {\n   ENVI SpecLib created using RStoolbox for R [", date(), "]}\n",
"samples = ", 1, "\n",
"lines   = ", 1, "\n",
"bands   = ", nrow(spectral_data), "\n",  # Bands are the number of rows in spectral data
"header offset = 0\n",
"file type = ENVI Spectral Library\n",
"data type = 5\n",  # ENVI data type for reflectance data
"interleave = bsq\n",
"sensor type = Unknown\n",
"byte order = ", c("little" = 0, "big" = 1)[endian], "\n",
"wavelength units = ", wavl.units, "\n",
"reflectance scale factor = ", scaleF, "\n",
"z plot range = {0.00,", ceiling(max(spectral_data, na.rm = TRUE) * 1.2), "}\n",  # Adjust based on spectral data range
"z plot titles = {Wavelength, Reflectance}\n",
"band names = {\nSpectral Library}\n",
"spectra names = {\n ",
paste(colnames(spectral_data), collapse = ", "), "}\n",
"wavelength = {\n ",
paste(attributes[, 1], collapse = ", "), "}"))  # Assuming the first column is wavelength
sink()
## Write actual binary data
x1 <- as.vector(unlist(spectral_data))  # Flatten the spectral data (remove the first column - wavelengths)
writeBin(x1, path, endian = endian)  # Write binary data to the file
} ## End write binary mode
## Begin write ASCII mode
if (mode == "ASCII") {
# Create column descriptions for each column (except wavelength column)
collector <- character()
for (i in 2:ncol(spectral_data)) {
collector <- append(collector, paste0("\nColumn ", i, ": ", colnames(spectral_data)[i], "~~", i))
}
# Write the header for ASCII file
sink(path)
writeLines(paste0("ENVI ASCII Plot File [", date(), "]\n",
"Column 1: wavelength",
paste0(collector, collapse = "")))
sink()
# Append spectral data in the proper format
write.table(data.frame(x = rep("", nrow(spectral_data)), spectral_data), path, sep = "  ", append = TRUE, row.names = FALSE, col.names = FALSE, quote = FALSE)
} ## End ASCII mode
} ## EOF writeSLI
# Call the function to write the SLI file
writeSLI(data, "C:/Users/PaintRock/Documents/Data processing/Hyperspectral/canopy_spectra/speclib.sli"
, mode = "bin")  # Use "ASCII" if you want ASCII output
View(data)
# Function to write an ENVI Spectral Library (SLI)
writeSLI <- function(x, path, wavl.units = "Micrometers", scaleF = 1, mode = "bin", endian = .Platform$endian) {
# Separate attributes (first four columns) and spectral data (remaining columns)
attributes <- x[, 1:4]  # Assuming first four columns are attributes
spectral_data <- x[, 5:ncol(x)]  # Assuming remaining columns are spectral data
# Extract spectra names from the third column (assuming it's the spectra names column)
spectra_names <- attributes[, 3]  # The third column is for spectra names
## Begin write binary mode
if (mode == "bin") {
# Write header file (ENVI header format)
sink(paste0(path, ".hdr"))
writeLines(paste0("ENVI\n",
"description = {\n   ENVI SpecLib created using RStoolbox for R [", date(), "]}\n",
"samples = ", 1, "\n",
"lines   = ", 1, "\n",
"bands   = ", nrow(spectral_data), "\n",  # Bands are the number of rows in spectral data
"header offset = 0\n",
"file type = ENVI Spectral Library\n",
"data type = 5\n",  # ENVI data type for reflectance data
"interleave = bsq\n",
"sensor type = Unknown\n",
"byte order = ", c("little" = 0, "big" = 1)[endian], "\n",
"wavelength units = ", wavl.units, "\n",
"reflectance scale factor = ", scaleF, "\n",
"z plot range = {0.00,", ceiling(max(spectral_data, na.rm = TRUE) * 1.2), "}\n",  # Adjust based on spectral data range
"z plot titles = {Wavelength, Reflectance}\n",
"band names = {\nSpectral Library}\n",
"spectra names = {\n ",
paste(spectra_names, collapse = ", "), "}\n",  # Use the third column for spectra names
"wavelength = {\n ",
paste(attributes[, 1], collapse = ", "), "}"))  # Assuming the first column is wavelength
sink()
## Write actual binary data
x1 <- as.vector(unlist(spectral_data))  # Flatten the spectral data (remove the first column - wavelengths)
writeBin(x1, path, endian = endian)  # Write binary data to the file
} ## End write binary mode
## Begin write ASCII mode
if (mode == "ASCII") {
# Create column descriptions for each column (except wavelength column)
collector <- character()
for (i in 2:ncol(spectral_data)) {
collector <- append(collector, paste0("\nColumn ", i, ": ", colnames(spectral_data)[i], "~~", i))
}
# Write the header for ASCII file
sink(path)
writeLines(paste0("ENVI ASCII Plot File [", date(), "]\n",
"Column 1: wavelength",
paste0(collector, collapse = "")))
sink()
# Append spectral data in the proper format
write.table(data.frame(x = rep("", nrow(spectral_data)), spectral_data), path, sep = "  ", append = TRUE, row.names = FALSE, col.names = FALSE, quote = FALSE)
} ## End ASCII mode
} ## EOF writeSLI
# Call the function to write the SLI file
writeSLI(data, "C:/Users/PaintRock/Documents/Data processing/Hyperspectral/canopy_spectra/speclib.sli"
, mode = "bin")  # Use "ASCII" if you want ASCII output
# Read in the CSV file
data <- read.csv(
"C:/Users/PaintRock/Documents/Data processing/Hyperspectral/masked_speclib.csv")
#######Summerizing TreeID##########
summary_data <- data %>%
group_by(TreeID) %>%
summarise(
across(4:330, ~ mean(.x, na.rm = TRUE), .names = "mean_{col}"),
count = n()
)
View(summary_data)
# Function to write an ENVI Spectral Library (SLI)
writeSLI <- function(x, path, wavl.units = "Micrometers", scaleF = 1, mode = "bin", endian = .Platform$endian) {
# Separate attributes (first column) and spectral data (remaining columns)
attributes <- x[, 1, drop = FALSE]  # Assuming the first column contains attributes (labels)
spectral_data <- x[, 2:ncol(x)]  # Spectral data starts from the second column
# Extract spectra names from the first column (attributes)
spectra_names <- attributes[, 1]  # Use the first column as spectra names
# Ensure the column names for spectral data are wavelengths (you can adjust this if the wavelengths are provided elsewhere)
# Here, I'm assuming the column names of the spectral data are wavelength values
wavelengths <- colnames(spectral_data)
## Begin write binary mode
if (mode == "bin") {
# Write header file (ENVI header format)
sink(paste0(path, ".hdr"))
writeLines(paste0("ENVI\n",
"description = {\n   ENVI SpecLib created using RStoolbox for R [", date(), "]}\n",
"samples = ", 1, "\n",
"lines   = ", 1, "\n",
"bands   = ", nrow(spectral_data), "\n",  # Bands are the number of rows in spectral data
"header offset = 0\n",
"file type = ENVI Spectral Library\n",
"data type = 5\n",  # ENVI data type for reflectance data
"interleave = bsq\n",
"sensor type = Unknown\n",
"byte order = ", c("little" = 0, "big" = 1)[endian], "\n",
"wavelength units = ", wavl.units, "\n",
"reflectance scale factor = ", scaleF, "\n",
"z plot range = {0.00,", ceiling(max(spectral_data, na.rm = TRUE) * 1.2), "}\n",  # Adjust based on spectral data range
"z plot titles = {Wavelength, Reflectance}\n",
"band names = {\nSpectral Library}\n",
"spectra names = {\n ",
paste(spectra_names, collapse = ", "), "}\n",  # Use the first column for spectra names
"wavelength = {\n ",
paste(wavelengths, collapse = ", "), "}"))  # Wavelengths are assumed to be column names
sink()
## Write actual binary data
x1 <- as.vector(unlist(spectral_data))  # Flatten the spectral data (remove the first column - attributes)
writeBin(x1, path, endian = endian)  # Write binary data to the file
} ## End write binary mode
## Begin write ASCII mode
if (mode == "ASCII") {
# Create column descriptions for each column (except wavelength column)
collector <- character()
for (i in 2:ncol(spectral_data)) {
collector <- append(collector, paste0("\nColumn ", i, ": ", colnames(spectral_data)[i], "~~", i))
}
# Write the header for ASCII file
sink(path)
writeLines(paste0("ENVI ASCII Plot File [", date(), "]\n",
"Column 1: wavelength",
paste0(collector, collapse = "")))
sink()
# Append spectral data in the proper format
write.table(data.frame(x = rep("", nrow(spectral_data)), spectral_data), path, sep = "  ", append = TRUE, row.names = FALSE, col.names = FALSE, quote = FALSE)
} ## End ASCII mode
} ## EOF writeSLI
View(summary_data)
# Write the subsetted data to a new CSV file
write.csv(summary_data, "C:/Users/PaintRock/Documents/Data processing/Hyperspectral/masked_subset.csv", row.names = FALSE)
data <- read.csv("C:/Users/PaintRock/Documents/Data processing/Hyperspectral/masked_subset.csv")
# Function to write an ENVI Spectral Library (SLI)
writeSLI <- function(x, path, wavl.units = "Micrometers", scaleF = 1, mode = "bin", endian = .Platform$endian) {
# Separate attributes (first column) and spectral data (remaining columns)
attributes <- x[, 1, drop = FALSE]  # Assuming the first column contains attributes (labels)
spectral_data <- x[, 2:ncol(x)]  # Spectral data starts from the second column
# Extract spectra names from the first column (attributes)
spectra_names <- attributes[, 1]  # Use the first column as spectra names
# Ensure the column names for spectral data are wavelengths (you can adjust this if the wavelengths are provided elsewhere)
# Here, I'm assuming the column names of the spectral data are wavelength values
wavelengths <- colnames(spectral_data)
## Begin write binary mode
if (mode == "bin") {
# Write header file (ENVI header format)
sink(paste0(path, ".hdr"))
writeLines(paste0("ENVI\n",
"description = {\n   ENVI SpecLib created using RStoolbox for R [", date(), "]}\n",
"samples = ", 1, "\n",
"lines   = ", 1, "\n",
"bands   = ", nrow(spectral_data), "\n",  # Bands are the number of rows in spectral data
"header offset = 0\n",
"file type = ENVI Spectral Library\n",
"data type = 5\n",  # ENVI data type for reflectance data
"interleave = bsq\n",
"sensor type = Unknown\n",
"byte order = ", c("little" = 0, "big" = 1)[endian], "\n",
"wavelength units = ", wavl.units, "\n",
"reflectance scale factor = ", scaleF, "\n",
"z plot range = {0.00,", ceiling(max(spectral_data, na.rm = TRUE) * 1.2), "}\n",  # Adjust based on spectral data range
"z plot titles = {Wavelength, Reflectance}\n",
"band names = {\nSpectral Library}\n",
"spectra names = {\n ",
paste(spectra_names, collapse = ", "), "}\n",  # Use the first column for spectra names
"wavelength = {\n ",
paste(wavelengths, collapse = ", "), "}"))  # Wavelengths are assumed to be column names
sink()
## Write actual binary data
x1 <- as.vector(unlist(spectral_data))  # Flatten the spectral data (remove the first column - attributes)
writeBin(x1, path, endian = endian)  # Write binary data to the file
} ## End write binary mode
## Begin write ASCII mode
if (mode == "ASCII") {
# Create column descriptions for each column (except wavelength column)
collector <- character()
for (i in 2:ncol(spectral_data)) {
collector <- append(collector, paste0("\nColumn ", i, ": ", colnames(spectral_data)[i], "~~", i))
}
# Write the header for ASCII file
sink(path)
writeLines(paste0("ENVI ASCII Plot File [", date(), "]\n",
"Column 1: wavelength",
paste0(collector, collapse = "")))
sink()
# Append spectral data in the proper format
write.table(data.frame(x = rep("", nrow(spectral_data)), spectral_data), path, sep = "  ", append = TRUE, row.names = FALSE, col.names = FALSE, quote = FALSE)
} ## End ASCII mode
} ## EOF writeSLI
data <- read.csv("C:/Users/PaintRock/Documents/Data processing/Hyperspectral/masked_subset.csv")
# Call the function to write the SLI file
writeSLI(data, "C:/Users/PaintRock/Documents/Data processing/Hyperspectral/canopy_spectra/speclib.sli"
, mode = "bin")  # Use "ASCII" if you want ASCII output
