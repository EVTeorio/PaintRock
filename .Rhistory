#TrID_df$File <- paste0(path, "/", imgs[x])
# Combine spectral data and metadata
spectral_data <- cbind(TrID_df, spectral_data)
# Add to the list of results
all_spectral_data[[x]] <- spectral_data
}
# Combine all the spectral data from the list into a single data frame
final_df <- do.call(rbind, all_spectral_data)
# Write the combined data to a CSV file
write.csv(final_df, file.path("C:/Users/PaintRock/Documents/Data processing/Hyperspectral/canopy_spectra/canopy_speclib.csv"),
row.names = FALSE)
return(final_df)
}
# Set the directory path
path <- "C:/Users/PaintRock/Documents/Data processing/Hyperspectral/Canopy Rasters/"
# Call the function to process the data and save it as CSV
spectral_df <- extract_spectral_data(path)
# List all .ENVI files in the given path
allfiles <- list.files(path)
imgs <- subset(allfiles, grepl(".ENVI", allfiles))
allfiles <- list.files(path)
print(allfiles)  # Print the list of files to see if .ENVI files are present
# List all .ENVI files in the given path
allfiles <- list.files(path)
imgs <- subset(allfiles, grepl("\\.ENVI$", allfiles))
# Define the function to extract spectral values and metadata
extract_spectral_data <- function(path) {
# List all .ENVI files in the given path
allfiles <- list.files(path)
imgs <- subset(allfiles, grepl("\\.ENVI$", allfiles))
# Initialize an empty list to store results
all_spectral_data <- list()
# Loop over each file to extract spectral data and metadata
for (x in seq_along(imgs)) {
# Construct the full path to the image
img_path <- file.path(path, imgs[x])
# Use raster to read the ENVI file
img <- brick(img_path)  # raster::brick() reads multi-band files
# Extract spectral data: we assume it's a multi-band raster
spectral_data <- as.data.frame(as.matrix(img))  # Convert the raster to a matrix and then to a data frame
# Extract metadata from the filename using str_match (as per your suggestion)
imgs_names <- str_match(imgs[x], "(.*)\\.ENVI")  # Match the name without the extension
imgs_names <- imgs_names[1, 2]  # Access the first captured group (the filename part without extension)
# Split metadata from filename using str_split() instead of separate()
TrID <- str_split(imgs_names, "_")[[1]]  # Split by underscore (_)
# Convert to a data frame
TrID_df <- data.frame(Group = TrID[1], TreeID = TrID[2], SpeciesID = TrID[3])
# Add the full file path to metadata
#TrID_df$File <- paste0(path, "/", imgs[x])
# Combine spectral data and metadata
spectral_data <- cbind(TrID_df, spectral_data)
# Add to the list of results
all_spectral_data[[x]] <- spectral_data
}
# Combine all the spectral data from the list into a single data frame
final_df <- do.call(rbind, all_spectral_data)
# Write the combined data to a CSV file
write.csv(final_df, file.path("C:/Users/PaintRock/Documents/Data processing/Hyperspectral/canopy_spectra/canopy_speclib.csv"),
row.names = FALSE)
return(final_df)
}
# Set the directory path
path <- "C:/Users/PaintRock/Documents/Data processing/Hyperspectral/Canopy Rasters/"
# Call the function to process the data and save it as CSV
spectral_df <- extract_spectral_data(path)
print(path)
# Define the function to extract spectral values and metadata
extract_spectral_data <- function(path) {
# List all .ENVI files in the given path
allfiles <- list.files(path)
imgs <- subset(allfiles, grepl("\\.ENVI$", allfiles))
# Initialize an empty list to store results
all_spectral_data <- list()
# Loop over each file to extract spectral data and metadata
for (x in seq_along(imgs)) {
# Construct the full path to the image
img_path <- file.path(path, imgs[x])
# Use raster to read the ENVI file
img <- brick(img_path)  # raster::brick() reads multi-band files
# Extract spectral data: we assume it's a multi-band raster
spectral_data <- as.data.frame(as.matrix(img))  # Convert the raster to a matrix and then to a data frame
# Extract metadata from the filename using str_match (as per your suggestion)
imgs_names <- str_match(imgs[x], "(.*)\\.ENVI")  # Match the name without the extension
imgs_names <- imgs_names[1, 2]  # Access the first captured group (the filename part without extension)
# Split metadata from filename using str_split() instead of separate()
TrID <- str_split(imgs_names, "_")[[1]]  # Split by underscore (_)
# Convert to a data frame
TrID_df <- data.frame(Group = TrID[1], TreeID = TrID[2], SpeciesID = TrID[3])
# Add the full file path to metadata
#TrID_df$File <- paste0(path, "/", imgs[x])
# Combine spectral data and metadata
spectral_data <- cbind(TrID_df, spectral_data)
# Add to the list of results
all_spectral_data[[x]] <- spectral_data
}
# Combine all the spectral data from the list into a single data frame
final_df <- do.call(rbind, all_spectral_data)
# Write the combined data to a CSV file
write.csv(final_df,("C:/Users/PaintRock/Documents/Data processing/Hyperspectral/canopy_spectra/canopy_speclib.csv"),
row.names = FALSE)
return(final_df)
}
# Set the directory path
path <- "C:/Users/PaintRock/Documents/Data processing/Hyperspectral/Canopy_Rasters/"
# Call the function to process the data and save it as CSV
spectral_df <- extract_spectral_data(path)
allfiles <- list.files(path, all.files = TRUE)
print(allfiles)  # This will also show hidden files
# Define the function to extract spectral values and metadata
extract_spectral_data <- function(path) {
# List all .ENVI files in the given path
allfiles <- list.files(path)
imgs <- subset(allfiles, grepl("1_ACSA3C_020571.ENVI"))
# Initialize an empty list to store results
all_spectral_data <- list()
# Loop over each file to extract spectral data and metadata
for (x in seq_along(imgs)) {
# Construct the full path to the image
img_path <- file.path(path, imgs[x])
# Use raster to read the ENVI file
img <- brick(img_path)  # raster::brick() reads multi-band files
# Extract spectral data: we assume it's a multi-band raster
spectral_data <- as.data.frame(as.matrix(img))  # Convert the raster to a matrix and then to a data frame
# Extract metadata from the filename using str_match (as per your suggestion)
imgs_names <- str_match(imgs[x], "(.*)\\.ENVI")  # Match the name without the extension
imgs_names <- imgs_names[1, 2]  # Access the first captured group (the filename part without extension)
# Split metadata from filename using str_split() instead of separate()
TrID <- str_split(imgs_names, "_")[[1]]  # Split by underscore (_)
# Convert to a data frame
TrID_df <- data.frame(Group = TrID[1], TreeID = TrID[2], SpeciesID = TrID[3])
# Add the full file path to metadata
#TrID_df$File <- paste0(path, "/", imgs[x])
# Combine spectral data and metadata
spectral_data <- cbind(TrID_df, spectral_data)
# Add to the list of results
all_spectral_data[[x]] <- spectral_data
}
# Combine all the spectral data from the list into a single data frame
final_df <- do.call(rbind, all_spectral_data)
# Write the combined data to a CSV file
write.csv(final_df, file.path("C:/Users/PaintRock/Documents/Data processing/Hyperspectral/canopy_spectra/canopy_speclib.csv"),
row.names = FALSE)
return(final_df)
}
# Set the directory path
path <- "C:/Users/PaintRock/Documents/Data processing/Hyperspectral/Canopy_Rasters/"
# Call the function to process the data and save it as CSV
spectral_df <- extract_spectral_data(path)
# Define the function to extract spectral data and metadata
extract_spectral_data <- function(path) {
# List all files in the directory and check
allfiles <- list.files(path)
print(allfiles)  # Check the list of files
# Filter out the .ENVI, .hdr, or .dat files
imgs <- subset(allfiles, grepl("\\.ENVI$|\\.hdr$|\\.dat$", allfiles))
print(imgs)  # Check which files match the pattern
# Initialize an empty list to store results
all_spectral_data <- list()
# Loop over each file to extract spectral data and metadata
for (x in seq_along(imgs)) {
# Construct the full path to the image
img_path <- file.path(path, imgs[x])
# Test if the file exists and can be loaded
if (!file.exists(img_path)) {
message("File does not exist: ", img_path)
next  # Skip to the next file
}
# Use raster to read the ENVI file
img <- tryCatch({
brick(img_path)  # raster::brick() reads multi-band files
}, error = function(e) {
message("Error reading file ", img_path, ": ", e$message)
NULL  # Return NULL if there's an error
})
# Skip to the next file if there was an error loading the image
if (is.null(img)) {
next
}
# Check if the image has any data
if (ncell(img) == 0) {
message("Empty raster: ", img_path)
next
}
# Extract spectral data: we assume it's a multi-band raster
spectral_data <- as.data.frame(as.matrix(img))  # Convert the raster to a matrix and then to a data frame
print(dim(spectral_data))  # Check the dimensions of the spectral data
# Extract metadata from the filename using str_match (as per your suggestion)
imgs_names <- str_match(imgs[x], "(.*)\\.ENVI")  # Match the name without the extension
imgs_names <- imgs_names[1, 2]  # Access the first captured group (the filename part without extension)
# Split metadata from filename using str_split() instead of separate()
TrID <- str_split(imgs_names, "_")[[1]]  # Split by underscore (_)
print(TrID)  # Check the metadata split
# Convert to a data frame
TrID_df <- data.frame(Group = TrID[1], TreeID = TrID[2], SpeciesID = TrID[3])
# Combine spectral data and metadata
spectral_data <- cbind(TrID_df, spectral_data)
# Add to the list of results
all_spectral_data[[x]] <- spectral_data
}
# Combine all the spectral data from the list into a single data frame
final_df <- do.call(rbind, all_spectral_data)
print(nrow(final_df))  # Check the final number of rows
# Write the combined data to a CSV file
write.csv(final_df, file.path(path, "canopy_speclib.csv"), row.names = FALSE)
return(final_df)
}
# Set the directory path
path <- "C:/Users/PaintRock/Documents/Data processing/Hyperspectral/canopy_spectra/"
# Call the function to process the data and save it as CSV
spectral_df <- extract_spectral_data(path)
# Define the function to extract spectral values and metadata
extract_spectral_data <- function(path) {
# List all files in the given path
allfiles <- list.files(path)
# Use grepl to find files that match the specific pattern
imgs <- subset(allfiles, grepl("1_ACSA3C_020571.ENVI", allfiles))  # Corrected grepl usage
# Initialize an empty list to store results
all_spectral_data <- list()
# Loop over each file to extract spectral data and metadata
for (x in seq_along(imgs)) {
# Construct the full path to the image
img_path <- file.path(path, imgs[x])
# Use raster to read the ENVI file
img <- brick(img_path)  # raster::brick() reads multi-band files
# Extract spectral data: we assume it's a multi-band raster
spectral_data <- as.data.frame(as.matrix(img))  # Convert the raster to a matrix and then to a data frame
# Extract metadata from the filename using str_match (as per your suggestion)
imgs_names <- str_match(imgs[x], "(.*)\\.ENVI")  # Match the name without the extension
imgs_names <- imgs_names[1, 2]  # Access the first captured group (the filename part without extension)
# Split metadata from filename using str_split() instead of separate()
TrID <- str_split(imgs_names, "_")[[1]]  # Split by underscore (_)
# Convert to a data frame
TrID_df <- data.frame(Group = TrID[1], TreeID = TrID[2], SpeciesID = TrID[3])
# Combine spectral data and metadata
spectral_data <- cbind(TrID_df, spectral_data)
# Add to the list of results
all_spectral_data[[x]] <- spectral_data
}
# Combine all the spectral data from the list into a single data frame
final_df <- do.call(rbind, all_spectral_data)
# Write the combined data to a CSV file
write.csv(final_df, file.path("C:/Users/PaintRock/Documents/Data processing/Hyperspectral/canopy_spectra/canopy_speclib.csv"),
row.names = FALSE)
return(final_df)
}
# Set the directory path
path <- "C:/Users/PaintRock/Documents/Data processing/Hyperspectral/Canopy_Rasters/"
# Call the function to process the data and save it as CSV
spectral_df <- extract_spectral_data(path)
# Set the directory path
path <- "C:/Users/PaintRock/Documents/Data processing/Hyperspectral/Canopy_Rasters/"
# Use grepl to find files that match the specific pattern
imgs <- subset(allfiles, grepl("1_ACSA3C_020571.ENVI", allfiles))  # Corrected grepl usage
# Use grepl to find files that match the specific pattern
imgs <- subset(allfiles, grepl("1_ACSA3C_020571.ENVI")  # Corrected grepl usage
# Initialize an empty list to store results
all_spectral_data <- list()
# Use grepl to find files that match the specific pattern
imgs <- subset(allfiles, grepl("1_ACSA3C_020571.ENVI")  # Corrected grepl usage
# Initialize an empty list to store results
all_spectral_data <- list()
# Define the function to extract spectral values and metadata
# List all files in the given path
allfiles <- list.files(path)
# Use grepl to find files that match the specific pattern
imgs <- subset(allfiles, grepl("1_ACSA3C_020571.ENVI")  # Corrected grepl usage
# Initialize an empty list to store results
all_spectral_data <- list()
# Define the function to extract spectral values and metadata
extract_spectral_data <- function(path) {
# List all .ENVI files in the given path
allfiles <- list.files(path, pattern = "\\.ENVI$", full.names = TRUE)  # Only .ENVI files
# Initialize an empty list to store results
all_spectral_data <- list()
# Loop over each .ENVI file to extract spectral data and metadata
for (x in seq_along(allfiles)) {
# Construct the full path to the image
img_path <- allfiles[x]
# Use raster to read the ENVI file
img <- tryCatch({
brick(img_path)  # raster::brick() reads multi-band files
}, error = function(e) {
message("Error reading file ", img_path, ": ", e$message)
NULL  # Return NULL if there's an error reading the file
})
# Skip to the next file if there was an error loading the image
if (is.null(img)) {
next
}
# Extract spectral data: we assume it's a multi-band raster
spectral_data <- as.data.frame(as.matrix(img))  # Convert the raster to a matrix and then to a data frame
# Extract metadata from the filename using str_match (as per your suggestion)
imgs_names <- str_match(basename(img_path), "(.*)\\.ENVI")  # Match the name without the extension
imgs_names <- imgs_names[1, 2]  # Access the first captured group (the filename part without extension)
# Split metadata from filename using str_split() (assuming the filename is in the format Group_TreeID_SpeciesID)
TrID <- str_split(imgs_names, "_")[[1]]  # Split by underscore (_)
# Convert to a data frame
TrID_df <- data.frame(Group = TrID[1], TreeID = TrID[2], SpeciesID = TrID[3])
# Combine spectral data and metadata
spectral_data <- cbind(TrID_df, spectral_data)
# Add to the list of results
all_spectral_data[[x]] <- spectral_data
}
# Combine all the spectral data from the list into a single data frame
final_df <- do.call(rbind, all_spectral_data)
return(final_df)  # Return the combined data frame
}
# Set the directory path
path <- "C:/Users/PaintRock/Documents/Data processing/Hyperspectral/Canopy_Rasters/"
# Call the function to process the data and get the dataframe
spectral_df <- extract_spectral_data(path)
# List all .ENVI files in the given path
allfiles <- list.files(path, pattern = "\\.ENVI$", full.names = TRUE)  # Only .ENVI files
# Define the function to extract spectral values and metadata
extract_spectral_data <- function(path) {
# List all .ENVI files in the given path
allfiles <- list.files(path)
imgs <- subset(allfiles, grepl("\\.ENVI$", allfiles))
# Initialize an empty list to store results
all_spectral_data <- list()
# Loop over each file to extract spectral data and metadata
for (x in seq_along(imgs)) {
# Construct the full path to the image
img_path <- file.path(path, imgs[x])
# Use raster to read the ENVI file
img <- brick(img_path)  # raster::brick() reads multi-band files
# Extract spectral data: we assume it's a multi-band raster
spectral_data <- as.data.frame(as.matrix(img))  # Convert the raster to a matrix and then to a data frame
# Extract metadata from the filename using str_match (as per your suggestion)
imgs_names <- str_match(imgs[x], "(.*)\\.ENVI")  # Match the name without the extension
imgs_names <- imgs_names[1, 2]  # Access the first captured group (the filename part without extension)
# Split metadata from filename using str_split() instead of separate()
TrID <- str_split(imgs_names, "_")[[1]]  # Split by underscore (_)
# Convert to a data frame
TrID_df <- data.frame(Group = TrID[1], TreeID = TrID[2], SpeciesID = TrID[3])
# Add the full file path to metadata
#TrID_df$File <- paste0(path, "/", imgs[x])
# Combine spectral data and metadata
spectral_data <- cbind(TrID_df, spectral_data)
# Add to the list of results
all_spectral_data[[x]] <- spectral_data
}
# Combine all the spectral data from the list into a single data frame
final_df <- do.call(rbind, all_spectral_data)
# Write the combined data to a CSV file
write.csv(final_df, file.path("C:/Users/PaintRock/Documents/Data processing/Hyperspectral/canopy_spectra/canopy_speclib.csv"),
row.names = FALSE)
return(final_df)
}
# Set the directory path
path <- "C:/Users/PaintRock/Documents/Data processing/Hyperspectral/canopy_spectra/Canopy_Rasters/"
# Call the function to process the data and save it as CSV
spectral_df <- extract_spectral_data(path)
imgs <- subset(allfiles, grepl("\\.ENVI$", allfiles))
# Initialize an empty list to store results
all_spectral_data <- list()
# Construct the full path to the image
img_path <- file.path(path, imgs[x])
imgs <- subset(allfiles,("\\.ENVI$"))
# Construct the full path to the image
img_path <- file.path(path, imgs[1])
# List all .ENVI files in the given path
allfiles <- list.files(path)
View(allfiles)
allfiles
imgs <- subset(allfiles, grepl("\\.ENVI$", allfiles))
# Initialize an empty list to store results
all_spectral_data <- list()
# Construct the full path to the image
img_path <- file.path(path, imgs[x])
# Construct the full path to the image
img_path <- file.path(path, imgs[i])
# Construct the full path to the image
img_path <- file.path(path, imgs[1])
print(img_path)
# Use raster to read the ENVI file
img <- brick(img_path)  # raster::brick() reads multi-band files
# Extract spectral data: we assume it's a multi-band raster
spectral_data <- as.data.frame(as.matrix(img))  # Convert the raster to a matrix and then to a data frame
View(spectral_data)
# Extract metadata from the filename using str_match (as per your suggestion)
imgs_names <- str_match(imgs[x], "(.*)\\.ENVI")  # Match the name without the extension
# Extract metadata from the filename using str_match (as per your suggestion)
imgs_names <- str_match(imgs[1], "(.*)\\.ENVI")  # Match the name without the extension
imgs_names <- imgs_names[1, 2]  # Access the first captured group (the filename part without extension)
# Split metadata from filename using str_split() instead of separate()
TrID <- str_split(imgs_names, "_")[[1]]  # Split by underscore (_)
View(TrID)
TrID
# Convert to a data frame
TrID_df <- data.frame(Group = TrID[1], TreeID = TrID[2], SpeciesID = TrID[3])
View(TrID_df)
# Convert to a data frame
TrID_df <- data.frame(Group = TrID[1], SpeciesID = TrID[2], TreeID = TrID[3])
View(TrID_df)
# Combine spectral data and metadata
spectral_data <- cbind(TrID_df, spectral_data)
View(spectral_data)
# Add to the list of results
all_spectral_data[[1]] <- spectral_data
View(all_spectral_data)
all_spectral_data[[1]]
# Define the function to extract spectral values and metadata
extract_spectral_data <- function(path) {
# List all .ENVI files in the given path
allfiles <- list.files(path)
imgs <- subset(allfiles, grepl("\\.ENVI$", allfiles))
# Initialize an empty list to store results
all_spectral_data <- list()
# Loop over each file to extract spectral data and metadata
for (x in seq_along(imgs)) {
# Construct the full path to the image
img_path <- file.path(path, imgs[x])
# Use raster to read the ENVI file
img <- brick(img_path)  # raster::brick() reads multi-band files
# Extract spectral data: we assume it's a multi-band raster
spectral_data <- as.data.frame(as.matrix(img))  # Convert the raster to a matrix and then to a data frame
# Extract metadata from the filename using str_match (as per your suggestion)
imgs_names <- str_match(imgs[x], "(.*)\\.ENVI")  # Match the name without the extension
imgs_names <- imgs_names[1, 2]  # Access the first captured group (the filename part without extension)
# Split metadata from filename using str_split() instead of separate()
TrID <- str_split(imgs_names, "_")[[1]]  # Split by underscore (_)
# Convert to a data frame
TrID_df <- data.frame(Group = TrID[1], SpeciesID = TrID[2], TreeID = TrID[3])
# Add the full file path to metadata
#TrID_df$File <- paste0(path, "/", imgs[x])
# Combine spectral data and metadata
spectral_data <- cbind(TrID_df, spectral_data)
# Add to the list of results
all_spectral_data[[x]] <- spectral_data
}
# Combine all the spectral data from the list into a single data frame
final_df <- do.call(rbind, all_spectral_data)
# Write the combined data to a CSV file
write.csv(final_df, file.path("C:/Users/PaintRock/Documents/Data processing/Hyperspectral/canopy_spectra/canopy_speclib.csv"),
row.names = FALSE)
return(final_df)
}
# Set the directory path
path <- "C:/Users/PaintRock/Documents/Data processing/Hyperspectral/canopy_spectra/Canopy_Rasters/"
# Call the function to process the data and save it as CSV
spectral_df <- extract_spectral_data(path)
# Call the function to process the data and save it as CSV
spectral_df <- extract_spectral_data(path)
# Load necessary libraries
library(dplyr)
library(ggplot2)
library(tidyr)
# Read in the CSV file
data <- read.csv(
"C:/Users/PaintRock/Documents/Data processing/Hyperspectral/canopy_spectra/canopy_speclib.csv")
View(data)
# Remove rows with NA values
data_clean <- na.omit(data)
#######Summerizing TreeID##########
summary_data <- data_clean %>%
group_by(TreeID) %>%
summarise(
across(3:331, ~ mean(.x, na.rm = TRUE), .names = "mean_{col}"),
count = n()
)
View(data)
#######Summerizing TreeID##########
summary_data <- data_clean %>%
group_by(TreeID) %>%
summarise(
across(4:330, ~ mean(.x, na.rm = TRUE), .names = "mean_{col}"),
count = n()
)
View(summary_data)
# Reshape the summary_data into long format for plotting
summary_data_long <- summary_data %>%
pivot_longer(cols = starts_with("mean_"),
names_to = "variable",
values_to = "mean_value")
View(summary_data_long)
#plotting
summary_data_long <- summary_data %>%
pivot_longer(cols = starts_with("mean_"),
names_to = "variable",
values_to = "mean_value")
ggplot(summary_data_long, aes(x = variable, y = mean_value, group = TreeID, color = TreeID)) +
geom_line() +  # Add lines for each species
facet_wrap(~ TreeID, scales = "free_y") +
labs(title = "Line Plot of Mean Values for Each Species",
x = "Bands)",
y = "Mean Value") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(legend.position = "none")
################# Summerizing SpeciesID##########
summary_data <- data_clean %>%
group_by(SpeciesID) %>%
summarise(
across(4:330, ~ mean(.x, na.rm = TRUE), .names = "mean_{col}"),
count = n()
)
print(summary_data)
# Reshape the summary_data into long format for plotting
summary_data_long <- summary_data %>%
pivot_longer(cols = starts_with("mean_"),
names_to = "variable",
values_to = "mean_value")
# Create a line plot for each TreeID
ggplot(summary_data_long, aes(x = variable, y = mean_value, group = SpeciesID, color = SpeciesID)) +
geom_line() +  # Add lines for each species
facet_wrap(~ SpeciesID, scales = "free_y") +
labs(title = "Line Plot of Mean Values for Each Species",
x = "Bands",
y = "Mean Value") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(legend.position = "none")
View(data)
